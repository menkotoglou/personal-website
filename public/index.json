[{"content":"🚨🚨🚨🚨 SPOILER ALERT: It\u0026rsquo;s obvious that my experience working at a startup is more than positive. If you have another experience, not so pleasant, please feel free to share it in the comments section below.\nAs natural, my perspective will be mainly focused on why a Software Engineer should join a startup at their early career, although I\u0026rsquo;m confident that the same applies to other roles since the challenges I face are not only engineering related.\nRecently, I joined a maritime startup, Seafair.\nSeafair is a tech startup offering maritime companies a digital marketplace to hire seafarers and software to manage seafarers onboard (contracts, work schedules, training, payments). Since its launch in 2020, it has raised $7M and operates out of NYC, Berlin, Athens, Manila and Odessa.\nSince I joined here, I already feel a better professional. Every day, I\u0026rsquo;m challenged to answer engineering and business challenges that I didn\u0026rsquo;t have the chance to face before.\nSome of the critical factors that helped me get along so well during the job:\nEngineering benefits  My colleagues have worked for great companies in the past and apply their knowledge and experience to the company. An early-stage startup building lots of tech from scratch. As a result, questions and challenges regarding querying, software architecture, and data management are a daily phenomenon. You\u0026rsquo;ll get familiar with many different software aspects. As a student, I didn\u0026rsquo;t have the chance to play with webservers, requests, or APIs. I heard them as general terms but didn\u0026rsquo;t have the opportunity to apply the theoretical knowledge to a real-life project. Building your soft skills that are so important as an engineer. Behaving and communicating your thoughts with the rest of the team and learning to understand the business needs and transform them into cool features.  Business benefits  You\u0026rsquo;ll have to learn a new domain from scratch. Successful startups built lately usually point out a specific niche, and as a result, the knowledge you\u0026rsquo;ll acquire to survive the ecosystem is critical. Again, you\u0026rsquo;ll be surrounded by people who all share the same goal, drive the company further. The motivation you get from joining a small company and doing your best to expand is enormous. You\u0026rsquo;ll have the chance to learn how businesses work. What is GMV, why is it very important for a startup? Questions on how businesses handle hiring, growth, and the different departments a company should be divided into. Of course, these questions vary depending on the business, but you\u0026rsquo;ll never have the chance to discover them if you never join one.  There are so many more benefits that I can\u0026rsquo;t find the words to explain. It is difficult to explain how motivated I feel for that opportunity and thank the people that gave me the chance to join Seafair.\nThe only extra tip I could give after having this experience is: Never hesitate to ask questions, even the simplest ones. There are no dumb questions. Every problem you face or question that comes up, guess what, probably someone was in the same situation before. Asking a question about it simplifies the work, maximizing your work\u0026rsquo;s productivity and effectiveness.\nDisclaimer: I may be a little biased because I have great teammates on this joyful journey, and I want to thank everyone for that for making my first experience so exciting. Nevertheless, I firmly believe that joining a startup in your early career could do much more good than harm.\n","permalink":"https://www.menelaoskotoglou.com/blog/why-you-should-join-a-startup-during-your-early-career/","summary":"🚨🚨🚨🚨 SPOILER ALERT: It\u0026rsquo;s obvious that my experience working at a startup is more than positive. If you have another experience, not so pleasant, please feel free to share it in the comments section below.\nAs natural, my perspective will be mainly focused on why a Software Engineer should join a startup at their early career, although I\u0026rsquo;m confident that the same applies to other roles since the challenges I face are not only engineering related.","title":"Why you should join a startup during your early career"},{"content":"University start Although I\u0026rsquo;ll mainly focus on why a Computer Science student needs to intern during his studies, probably this applies to all students in general.\nWhen I was a 2nd-year student, I realized that the knowledge I get from my university courses is beneficial but not enough for the job market. Sometimes, the way academia approaches modern software is too stale, and as a result, computer science students are not ready to get a new software engineering job after graduation. The knowledge you gain is (most of the time) necessary. Still, modern technologies that are required even for an entry-level position - such as using a version control system, e.g. Git - are never taught or presented to the students.\nI fully understand that some skills can\u0026rsquo;t be taught. For example, nobody can teach you how to approach a problem, divide it into smaller ones and think of a solution. You can learn these skills only with hands-on experience. I could contemplate why but it would distract the reader from the topic of the article.\nTaking action Realizing this, during my 2nd year at the university, I actively looked for an internship during the summer. Even though I don\u0026rsquo;t know the exact number, I\u0026rsquo;m sure that I applied to more than 50 companies. I secured an internship during mid-November, but the company unexpectedly cancelled because of the COVID-19 crisis.\nAt that point, I got anxious about whether another company would hire me for another internship or not. I kept applying to every Software Engineering or Data Science internship I found online. I used a variety of tools such as LinkedIn, AngelList, WeWorkRemotely, Remote.co, and many others. To most of my applications, I didn\u0026rsquo;t even hear back.\nI also used to listen to my favourite podcast, Feta Report. At some point, I had a question about the podcast and reached out to them through the website. I received an answer, and already knowing that the host works in the IT industry, I told him that I\u0026rsquo;m searching for an Internship. He gladly replied that he could help and we could collaborate on some project if I wanted to.\nI gladly accepted, and we started working on the project a little time after. The project was some great open-source work that you can find here. Throughout the project, I got familiar with tools such as Git(Issues, Pull Requests, Commits), Python, CI/CD, tools that you most probably won\u0026rsquo;t work with during your studies. I also got better communication skills. Especially for software engineers, working in an English speaking environment as a non-native English speaker is crucial. Job descriptions don\u0026rsquo;t specify how important it is for the candidate to be fluent in English, both orally and written. If you\u0026rsquo;re not fluent enough, you won\u0026rsquo;t pass even the early interview rounds.\nLater that summer, having successfully finished our project, my collaborator got back and offered me a paid internship at the startup he worked for. I accepted the offer and worked as an intern with the company for a month. The experience was great for me and my CV.\nHaving that experience before, I started searching for an internship for the following summer during October. Because of my previous work experience, the companies we\u0026rsquo;re inviting me for an interview more easily. I ended up accepting an offer from Citrix. My experience with Citrix was far better than I could imagine. Working in such a large enterprise environment is life-changing for a 3rd-year student. They have specially designed programs for interns so that they offer a great internship experience to them.\nTakeaways I want to clarify from the article that an internship gives you much more than some extra work experience on your CV. I usually state that you pass \u0026ldquo;From the ocean to a small lake\u0026rdquo; of candidates who have completed internships before and are more job-ready for graduate and junior positions.\nMy advice to every student:\n Organize your LinkedIn profile so that you have a very professional presence online. Even during your first year as a student, do your best to find a summer internship. Worst case, even an unpaid one if you can afford it. Consider it as an investment in yourself. Fight against your Imposter Syndrome. As a student, you most probably don\u0026rsquo;t have much knowledge. Employers know that. Let the employers decide if you\u0026rsquo;re qualified for the job or not. Make as many applications as possible. The more you apply, the better chance you get for an interview. There is the chance to impress the interviewer and eventually get the job. If you don\u0026rsquo;t feel confident with your English language knowledge, work on it. You may find Duolingo useful for that purpose.  To conclude, internships make you better both as a person and as an employee. My previous experiences from interviews and jobs make me much more confident to search for my next graduate/junior position as a Software Engineer or a Data Scientist.\n","permalink":"https://www.menelaoskotoglou.com/blog/the-importance-of-an-internship/","summary":"University start Although I\u0026rsquo;ll mainly focus on why a Computer Science student needs to intern during his studies, probably this applies to all students in general.\nWhen I was a 2nd-year student, I realized that the knowledge I get from my university courses is beneficial but not enough for the job market. Sometimes, the way academia approaches modern software is too stale, and as a result, computer science students are not ready to get a new software engineering job after graduation.","title":"The importance of an internship"},{"content":"As previously posted here: https://dev.to/koti/updating-an-important-but-stale-python-library-3o6i, me and Dimitry cooperated on updating a Python library important for the smooth operations of his company.\nUnfortunately, it seems that its original author never accepted our previous Pull Request to revive the profanity-check package. As a result, Github issues were kept being opened by other developers asking about the library and issues they had while using it. What surprised us the most, was this one: https://github.com/vzhou842/profanity-check/issues/28, where someone actually recommended our fork of the project as a \u0026ldquo;new version available here, that solves the issue very well\u0026rdquo;.\nConsidering this and seeing that package seemed to have many users, either in production or for personal use, we decided that re-publishing the same library would be a great idea to bring the package back to life and make it accessible for more developers to experiment with. The main problem was following up with scikit-learn package\u0026rsquo;s updates which rendered the initial models problematic as the next versions were released.\nAfter taking this quick and handy tutorial from Real Python: https://realpython.com/courses/how-to-publish-your-own-python-package-pypi/, we made some minor modifications to the project\u0026rsquo;s repository and uploaded our updated version to PyPi.\nOutcome turned out to be really beneficial during the process and made us better both as people and developers. For example, we found out that when uploading a PyPI package, you don\u0026rsquo;t really sync your repository to the PyPI project page. You only upload a tar\u0026rsquo;ed \u0026ldquo;/dist\u0026rdquo; directory\u0026rsquo;s content produced after running the python setup.py bdist_wheel command.\nWe also realised that many developers can sometimes be demanding things out of nowhere. They may request features and bug fixes, unable to understand that open-source software main purpose is the community\u0026rsquo;s contribution in every possible way. They should consider putting some work on the projects themselves or contributing in other ways or at least saying \u0026ldquo;thanks\u0026rdquo;.\nAt any case, taking on the \u0026ldquo;responsibility\u0026rdquo; of maintaining a Python package, widely used by the community seems to be an exciting journey on the open-source software adventure. It makes you feel proud and responsible for ensuring that other people\u0026rsquo;s projects continue to operate smoothly.\nYou can find the package and instructions for its installation here: https://pypi.org/project/alt-profanity-check/. Also, the source code can be found here: https://gitlab.com/dimitrios/alt-profanity-check. Contributions and new feature ideas are more than welcome.\n","permalink":"https://www.menelaoskotoglou.com/blog/republishing-and-maintaining-profanity-check/","summary":"As previously posted here: https://dev.to/koti/updating-an-important-but-stale-python-library-3o6i, me and Dimitry cooperated on updating a Python library important for the smooth operations of his company.\nUnfortunately, it seems that its original author never accepted our previous Pull Request to revive the profanity-check package. As a result, Github issues were kept being opened by other developers asking about the library and issues they had while using it. What surprised us the most, was this one: https://github.","title":"Republishing and maintaining Profanity-check"},{"content":"Undoubtedly, the Covid-19 crisis has changed students’ habits a lot. Old habits, such as hanging out, drinking beers, watching movies and even studying together have almost torn apart since most countries are experiencing the second Coronavirus wave.\nAs a student, I decided to take advantage of the time gained from the situation to work on myself, my skills and my academic performance. Especially when the University’s workload increases, keeping yourself disciplined and focused on your goals becomes even harder.\nDuring these times, working in a study group is really helpful. Working as a team with your fellow students helps you maintain your focus and motivation. Even the days you don’t feel like studying, although you need to, your team encourages you to keep on completing your tasks. Also, the whole team gets the advantage of each individual’s strengths. Usually, students tend to like some courses more than others. Using this, team members help each other and save valuable time and effort from browsing through course’s notes in Elearning platform.\nChoosing the right platform that best suits your needs is crucial. My group prefers Google Meet. We consider it as the most stable and user-friendly free video calling software right now. Occasionally, we also use Skype, Zoom, Messenger or Discord.\nI need additionally to mention the socialising part of group studying. Social distancing will last for some more months at least, socialising even virtually, is crucial for student’s mental health. As shown in the pie chart, communicating with your teammates for extracurricular activities is a main part of this, helping students to keep their social life balanced. Also, after completing your coursework you can work on your hobbies, such as side projects or gaming.\nTo conclude, although this chart seems to be very descriptive: the small percentage of “actually studying” time is so efficient that it is worth giving a try to make a study group.\nThe article is also published on Medium https://menelaoskotoglou.medium.com/the-power-of-study-groups-e1312b6b193d\n","permalink":"https://www.menelaoskotoglou.com/blog/the-power-of-study-groups/","summary":"Undoubtedly, the Covid-19 crisis has changed students’ habits a lot. Old habits, such as hanging out, drinking beers, watching movies and even studying together have almost torn apart since most countries are experiencing the second Coronavirus wave.\nAs a student, I decided to take advantage of the time gained from the situation to work on myself, my skills and my academic performance. Especially when the University’s workload increases, keeping yourself disciplined and focused on your goals becomes even harder.","title":"The Power Of Study Groups"},{"content":"The project is based on a “profanity-check” library created by Victor Zhou. You can read more about it here and find it online here: https://github.com/vzhou842/profanity-check. Firstly, we installed the library in a virtual environment and experimented with different samples.\nWe tested the model with an internal dataset consisting of 850 tweets retrieved through Twitter’s sampling API then labeled manually. This produced the following results:\nConfusion Matrix\n   ActualPredicted Not Profane (0) Profane (1)     Not Profane (0) 703 14   Profane (1) 93 39    Accuracy Score: 87.4%\nThe issue that came up is that with newer Python and scikit-learn versions a list of warnings was thrown when including the library. Library’s dependencies were gradually deprecated and we had to update them making them compatible with newer versions of Python and scikit-learn. This is important because at any given point in time new releases of these libraries might not be able to deserialize the joblib’ed (alternative to pickle) file stored with the library.\nAs the library’s documentation states https://scikit-learn.org/stable/modules/model_persistence.html :\n“… pickle (and joblib by extension), has some issues regarding maintainability and security. Because of this,\nNever unpickle untrusted data as it could lead to malicious code being executed upon loading. While models saved using one version of scikit-learn might load in other versions, this is entirely unsupported and inadvisable. It should also be kept in mind that operations performed on such data could give different and unexpected results.”\nThis was not happening in this case as the original author had provided the input dataset and the serialised model files, but not the script to create them from these data. For this, I installed Python3.8 and scikit-learn 0.23.1. After lots of experiments, I substituted CountVectorizer from Victor Zhou’s blog post with TfidfVectorizer, trained the model based on the “clean_data.csv” from which the initial version was trained with and got roughly the same accuracy score as the previous model had. In detail:\nConfusion Matrix\n   ActualPredicted Not Profane (0) Profane (1)     Not Profane (0) 697 20   Profane (1) 87 45    Accuracy Score: 87.4%\nWorking on this project helped me to:\n Enhance my Python and scikit-learn knowledge. Work with pandas, NumPy, and Joblib libraries. Get familiar with open source development workflows. Use git working alongside with another collaborator to solve a problem.  The biggest surprise was a versioning issue that came up. Specifically, I had to find a way to update the model in a version compatible with Python3.8 since the current model’s scikit-learn version was not compatible with that version. Fortunately scikit-learn 0.23.1 works with Python3.8 hence chose this version.\nOverall, It’s been a great experience. I was able to use my academic knowledge to solve a real world problem. Also I was lucky to be supervised and mentored by Dimitrios, yourself.online’s current CTO: was confident to speak and discuss every question that came up, even the dumbest ones. During every project’s step constant and immediate feedback was provided.\nMy model is currently used in production as committed in the fork here: https://github.com/dimitrismistriotis/profanity-check. Changes have also been submitted to the original library: https://github.com/vzhou842/profanity-check/pull/19. As stated the model is used as part of the content classification checks that happen within yourself.online’s service which is available here: https://www.yourself.online.\n","permalink":"https://www.menelaoskotoglou.com/blog/updating-an-important-but-stale-python-library/","summary":"The project is based on a “profanity-check” library created by Victor Zhou. You can read more about it here and find it online here: https://github.com/vzhou842/profanity-check. Firstly, we installed the library in a virtual environment and experimented with different samples.\nWe tested the model with an internal dataset consisting of 850 tweets retrieved through Twitter’s sampling API then labeled manually. This produced the following results:\nConfusion Matrix\n   ActualPredicted Not Profane (0) Profane (1)     Not Profane (0) 703 14   Profane (1) 93 39    Accuracy Score: 87.","title":"Updating an important but stale Python library"},{"content":"I am an ambitious and highly motivated student. A keen learner who loves and follows new technology trends. Highly interested in Data Science, Machine Learning, and Software Development. I am continually looking for interesting open-source projects to contribute.\nAdditionally, I have a great passion for milk chocolate and travelling.\nSkills  Languages  Python SQL | MySQL Java HTML | CSS | JavaScript Familliar with PHP Familliar with Golang   Libraries  Pandas NumPy   Frameworks  Scikit-Learn Familliar with TensorFlow Familliar with Django Familliar with Laravel   Other Skills  Version-control (Git) Open-source development workflows Pelican | Static Site Generator Hugo | Static Site Generator Markdown  Education  Bachelor of Engineering - BE, Computer Engineering and Informatics\n2018 - Present\n","permalink":"https://www.menelaoskotoglou.com/about/","summary":"I am an ambitious and highly motivated student. A keen learner who loves and follows new technology trends. Highly interested in Data Science, Machine Learning, and Software Development. I am continually looking for interesting open-source projects to contribute.\nAdditionally, I have a great passion for milk chocolate and travelling.\nSkills  Languages  Python SQL | MySQL Java HTML | CSS | JavaScript Familliar with PHP Familliar with Golang   Libraries  Pandas NumPy   Frameworks  Scikit-Learn Familliar with TensorFlow Familliar with Django Familliar with Laravel   Other Skills  Version-control (Git) Open-source development workflows Pelican | Static Site Generator Hugo | Static Site Generator Markdown  Education  Bachelor of Engineering - BE, Computer Engineering and Informatics","title":"About Me"},{"content":" Feel free to contact me. I am continually looking for feedback, tips, and comments to get better. You can also reach out to me for collaborations.\nMy email: contact@menelaoskotoglou.com\nYou can also contact me through my social media accounts.\n","permalink":"https://www.menelaoskotoglou.com/contact/","summary":"Feel free to contact me. I am continually looking for feedback, tips, and comments to get better. You can also reach out to me for collaborations.\nMy email: contact@menelaoskotoglou.com\nYou can also contact me through my social media accounts.","title":"Contact Me"},{"content":" Profanity-check by Victor Zhou Contributor\n Reverse engineered training script. Updated versions of scikit-learn and included it in setup.py and requirements.txt. Retrained model with the provided training data and updated version. Dropped support for Python3.5, since it was no longer compatible with current scikit-learn version. Fixed the test suite.   Bin information parsing for Premier Payments Online Creator\n Managed multiple \u0026ldquo;.csv\u0026rdquo; files using Pandas library. Created a script to parse valuable info from various transactions done.   Feta Report website Contributor\n Cooperated with podcast\u0026rsquo;s owner to develop the website as a static site. Used Pelican static site generator.   Personal Website Creator\n This website. Created with Hugo. You can find the source code here  ","permalink":"https://www.menelaoskotoglou.com/projects/","summary":"Profanity-check by Victor Zhou Contributor\n Reverse engineered training script. Updated versions of scikit-learn and included it in setup.py and requirements.txt. Retrained model with the provided training data and updated version. Dropped support for Python3.5, since it was no longer compatible with current scikit-learn version. Fixed the test suite.   Bin information parsing for Premier Payments Online Creator\n Managed multiple \u0026ldquo;.csv\u0026rdquo; files using Pandas library. Created a script to parse valuable info from various transactions done.","title":"Projects"},{"content":"","permalink":"https://www.menelaoskotoglou.com/search/","summary":"search","title":"Search"}]